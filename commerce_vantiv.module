<?php
/**
 * @file
 * Implements Litle payment services for use in Drupal Commerce.
 */

define('COMMERCE_PAYMENT_STATUS_VANTIV_CAPTURED', 'CAPTURED');
define('COMMERCE_PAYMENT_STATUS_VANTIV_REFUND', 'REFUNDED');
define('COMMERCE_PAYMENT_STATUS_VANTIV_CANCELED', 'CANCELED');

/**
 * Implements hook_libraries_info().
 */
function commerce_vantiv_libraries_info() {
  $libraries['litle'] = array(
    'name' => 'Litle',
    'vendor url' => 'http://www.vantiv.com/',
    'download url' => 'https://github.com/LitleCo/litle-sdk-for-php/archive/master.zip',
    'path' => 'litle',
    /*'version arguments' => array(
    'file' => 'VERSION',
    'pattern' => '@([a-z0-9\.-]+)@',
    'lines' => 1,
    'cols' => 10,
    ),*/
    'files' => array(
      'php' => array(
        //'sdk/Setup.php',
        'sdk/XmlFields.php',
        'sdk/XmlParser.php',
        'sdk/UrlMapper.php',
        'sdk/LitleXmlMapper.php',
        'sdk/Obj2xml.php',
        'sdk/Checker.php',
        'sdk/Transactions.php',
        'sdk/LitleOnline.php',
        'sdk/LitleOnlineRequest.php',
        'sdk/Communication.php',
        'sdk/BatchRequest.php',
        'sdk/LitleRequest.php',
        'sdk/LitleResponseProcessor.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vantiv_commerce_payment_method_info() {
  $payment_methods = array();

  //Comment the offsite payment for now
 /* $payment_methods['ogone_offsite'] = array(
    'base' => 'commerce_ogone',
    'title' => t('Ingenico online gateway'),
    'short_title' => t('Ingenico online gateway'),
    'display_title' => t('Ingenico online gateway'),
    'description' => t('Integrates Ingenico online gateway.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => FALSE,
    'file' => 'include/commerce_ogone_direct.inc',
  );*/

  $payment_methods['vantiv_direct'] = array(
    'base' => 'commerce_vantiv',
    'title' => t('Vantiv direcet payment'),
    'short_title' => t('Vantiv direcet payment'),
    'display_title' => t('Vantiv direcet payment'),
    'description' => t('Vantiv direcet payment'),
    'terminal' => FALSE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'active' => FALSE,
    'callback' => array(),
    'file' => 'includes/commerce_vantiv_direct.inc',
  );

  return $payment_methods;
}
/**
 * Implements hook_menu().
 */
function commerce_vantiv_menu() {
  $items = array();

  //test url.
  $items['test'] = array(
    'page callback' => 'test',
    //'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Settings form in the admin UI for the payment method.
 */
function commerce_vantiv_settings_form($settings = NULL) {
  $settings = (array) $settings + array(
    'account' => 'test',
    'pspid' => '',
    'currency' => variable_get('commerce_default_currency', 'USD'),
    'language' => '',
    'sha_in' => '',
    'sha_out' => '',
    'language_list' => array(),
  );
/*
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Processing url'),
    '#description' => t('Please choose Litle url from the following list:'),
    '#options' => array(
      'https://www.testlitle.com/sandbox/communicator/online' => 'Sandbox: https://www.testlitle.com/sandbox/communicator/online',
      'https://postlive.litle.com/vap/communicator/online' => 'Postlive: https://postlive.litle.com/vap/communicator/online',
      'https://transact-postlive.litle.com/vap/communicator/online' => 'Transact Postlive: https://transact-postlive.litle.com/vap/communicator/online',
      'https://payments.litle.com/vap/communicator/online' => 'Production: https://payments.litle.com/vap/communicator/online',
      'https://transact.litle.com/vap/communicator/online' => 'Production Transact: https://transact.litle.com/vap/communicator/online',
      'https://prelive.litle.com/vap/communicator/online' => 'Prelive: https://prelive.litle.com/vap/communicator/online',
      'https://transact-prelive.litle.com/vap/communicator/online' => 'Transact Prelive: https://transact-prelive.litle.com/vap/communicator/online'
    ),
    '#default_value' => isset($settings['url']) ? $settings['url'] : "https://www.testlitle.com/sandbox/communicator/online" ,
    '#required' => TRUE,
  );*/

  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Processing url'),
    '#description' => t('Please choose Litle url from the following list:'),
    '#options' => array(
      'sandbox' => ('Sandbox test link - for testing purposes only'),
      'postlive' => ('Postlive link'),
      'transact_postlive' => ('Transact Postlive'),
      'production' => ('Production link'),
      'production_transact' => ('Production Transactions'),
      'prelive' => ('Prelive'),
      'transact_prelive' => ('Transact Prelive'),
    ),
    '#default_value' => isset($settings['account']) ? $settings['account'] : 'sandbox',
    '#required' => TRUE,
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('USER ID'),
    '#description' => t('Enter your API username.'),
    '#default_value' => !empty($settings['user']) ? $settings['user'] : '',
    '#required' => TRUE,
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Enter your merchant id.'),
    '#default_value' => !empty($settings['merchant_id']) ? $settings['merchant_id'] : '',
    '#required' => TRUE,
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Your API password.'),
    '#default_value' => !empty($settings['password']) ? $settings['password'] : '',
    '#required' => TRUE,
  );

  $form['3d_secure'] = array(
    '#type' => 'radios',
    '#title' => t('3D Secure security check of customers cards.'),
    '#default_value' => !empty($settings['3d_secure']) ? $settings['3d_secure'] : '0',
    '#options' => array(
      '0' => t('Allways require authentication.'),
      '1' => t('Do not perform 3D-Secure checks and always authorise.'),
    ),
  );

  $form['transaction_type_process'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction type'),
    '#default_value' => empty($settings['transaction_type_process']) ? 'sale' : $settings['transaction_type_process'],
    '#options' => array(
      'sale' => t('Sale'),
      'pre_auth' => t('Pre-auth'),
    ),
  );

  $form['logs'] = array(
    '#type' => 'select',
    '#title' => t('Log issue responses.'),
    '#description' => t('Select whether or not the responses from the http requests should be logged.'),
    '#options' => array(
      '0' => t('Always log the responses'),
      '1' => t('Never log the responses'),
    ),
  );

  //$form['#submit'][] = 'commerce_vantiv_settings_form_submit';

  return $form;
}

function test() {
  $api = commerce_vantiv_api_object();
  dsm($api, 'api');
  dsm(variable_get('resp_code'), 'resp_code');
  dsm(variable_get('payload'), 'payload');
  dsm(ommerce_vantiv_load_last_saved_transaction(), 'last transac');
  dsm(commerce_payment_transaction_load(5));
}

function ommerce_vantiv_load_last_saved_transaction() {
  global $user;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
  ->propertyCondition('uid', $user->uid);
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 1);
  $return = array();
  $result = $query->execute();
    if (!empty($result['commerce_payment_transaction'])) {
    foreach ($result['commerce_payment_transaction'] as $transaction) {
      $return[] = entity_load_single('commerce_payment_transaction', $transaction->transaction_id);
    }
  }
  return $return;
}


/**
 * Creates api object.
 */
function commerce_vantiv_api_object($settings = array(), $instance_id = '') {
  $include_module = module_load_include('inc', 'commerce_vantiv', 'includes/commerce_vantiv.api');
  if (empty($instance_id)) {
    $instance = commerce_payment_method_instance_load('vantiv_direct|commerce_payment_vantiv_direct');
  }
  else {
    $instance = commerce_payment_method_instance_load($instance_id);
  }
  return new VantivApi($instance['settings']);
}

/**
 * Implements hool_commerce_payment_transaction_status_info().
 */
function commerce_vantiv_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_PAYMENT_STATUS_VANTIV_CAPTURED] = array(
    'status' => COMMERCE_PAYMENT_STATUS_VANTIV_CAPTURED,
    'title' => t('Captured'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_PAYMENT_STATUS_VANTIV_REFUND] = array(
    'status' => COMMERCE_PAYMENT_STATUS_VANTIV_REFUND,
    'title' => t('Refund'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_PAYMENT_STATUS_VANTIV_CANCELED] = array(
    'status' => COMMERCE_PAYMENT_STATUS_VANTIV_CANCELED,
    'title' => t('Canceled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );

  return $statuses;
}